<?php

define('YMARKET_PUBLISHED', 1);
define('YMARKET_UNPUBLISHED', 0);

/**
 * Implementation of hook_menu().
 */
function ymarket_menu(){
  $items = array();

  $items['admin/ymarket'] = array(
    'title' => 'Яндекс.Маркет',
    'title callback' => 'ymarket_title',
    'description' => 'Настройки',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ymarket_settings_form'),
    'access arguments' => array('admin yandex market'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ymarket.admin.inc',
  );
  $items['admin/ymarket/clear_cache'] = array(
    'title' => 'Очистить кэш',
    'page callback' => 'ymarket_clear_cache',
    'access arguments' => array('admin yandex market'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/ymarket/yml'] = array(
    'title' => 'Yandex Market XML',
    'page callback' => 'drupal_goto',
    'page arguments' => array('ymarket'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ymarket'] = array(
    'page callback' => 'ymarket_page',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ymarket_perm(){
  return array('admin yandex market');
}

/**
 * Implementation of hook_theme().
 */
function ymarket_theme(){
  $module_path = drupal_get_path('module', 'ymarket');
  $theme['ymarket_yml'] = array(
    'arguments' => array('nodes' => array()),
    'template' => 'ymarket',
    'path' => $module_path . '/templates',
    'preprocess functions' => array('ymarket_preprocess_yml'),
  );

  return $theme;
}

/**
 * Implementation of hook_help().
 */
function ymarket_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/ymarket':
      if (variable_get('ymarket_cache_out_of_date', FALSE)) {
        // return '<div class="messages preview">' . 'Внимание! Если вы добавили новый товар в маркет или удили его, изменения в файле экспорта вступят в силу только после ' . l('очистки кэша', 'admin/ymarket/clear_cache') . '.</div>';
        return '<div class="messages preview">' . 'Внимание! Товары были отредактированы или добавлены/удалены из маркета. Необходимо ' . l('очистить кэш', 'admin/ymarket/clear_cache') . ', чтобы изменения вступили в силу.</div>';
      }
  }
}

/**
 * Menu title callback
 *
 * @return string
 *  Заголовок страницы
 */
function ymarket_title($title) {
  $count_ymarket_nodes = variable_get('ymarket_nodes_in_yml', NULL);

  if (!is_null($count_ymarket_nodes)) {
    $title .= ' ( публикуется ' . $count_ymarket_nodes . ' шт.)';
  }

  return $title;
}

/**
 * Колбэк меню
 *
 * Выводит на страницу сформированный xml для Яндекс.Маркета
 *
 * @return void
 */
function ymarket_page(){
  $yml = ymarket_generate_yml();
  drupal_set_header('Content-Type:text/xml; charset=utf-8');
  echo $yml;
}

/**
 * Генерирует yml для маркета
 *
 * @return
 *  xml
 */
function ymarket_generate_yml(){
  $cache = (array) cache_get('ymarket_yml');

  if (!isset($cache['data'])) {
    $nodes = ymarket_nodes();
    $cache['data'] = theme('ymarket_yml', $nodes);
    cache_set('ymarket_yml', $cache['data']);
    variable_set('ymarket_nodes_in_yml', count($nodes));
  }

  return $cache['data'];
}

function ymarket_clear_cache() {
  cache_clear_all('ymarket_yml', 'cache');
  variable_set('ymarket_cache_out_of_date', FALSE);
  drupal_set_message('Кэш Яндекс.Маркета очищен.');
  drupal_goto('admin/ymarket');
}

/**
 * Implementation of hook_nodeapi().
 */
function ymarket_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // Модуль проверяет, были ли изменены или удалены/добавлены, ноды, которые относятся к маркету
  if (!variable_get('ymarket_cache_out_of_date', FALSE)) {
    switch ($op) {
      case 'presave':
        if (empty($node->nid) && $node->ymarket[0]['value']) {
          // Добавлена новая нода, которая участвует в маркете
          variable_set('ymarket_cache_out_of_date', TRUE);
        }
        elseif ($node->nid && isset($node->ymarket)) {
          // Нода отредактирована и значение поля маркета было изменено
          $ymarket_value_chanched = ymarket_node_in_market($node) != (bool) $node->ymarket[0]['value'];
          if ($ymarket_value_chanched) {
            variable_set('ymarket_cache_out_of_date', TRUE);
          }
        }
        break;

      case 'delete':
        if ($node->ymarket[0]['value']) {
          // Удален нода, которая участвовала в маркете
          variable_set('ymarket_cache_out_of_date', TRUE);
        }
        break;
    }
  }
}

function ymarket_preprocess_yml(&$variables){
  $ymarket_settings = variable_get('ymarket_settings', array());
  $variables = array_merge($variables, $ymarket_settings);

  $variables['date'] = date('Y-m-d H:i');
  $variables['categories'] = taxonomy_get_tree($variables['vid']);

  // Для каждой ноды модуль готовит необходимые переменные.
  foreach ($variables['nodes'] as $k => $node) {

    foreach ($node->taxonomy as $tid => $term) {
      // ИД категории каталога
      if ($term->vid == $variables['vid']) {
        $variables['nodes'][$k]->categoryId = $tid;
      }

      // Имя производителя
      elseif ($term->vid == $variables['vendor_vid']) {
        $variables['nodes'][$k]->vendor = htmlspecialchars($term->name);
      }
    }

    // Заголовок ноды
    $node->title = htmlspecialchars($node->title);

    // Статус доступности товара — в наличии/на заказ
    $node->available = (bool) $node->status;

    // Урл адрес ноды
    $node->url = htmlspecialchars(url('node/' . $node->nid, array('absolute' => TRUE)));

    // Описание ноды
    $node->body = htmlspecialchars($node->body);

    // Находит адрес изображения ноды
    $node_image_field = reset(ymarket_get_content_type_image_fields($node->type));
    $node_image_filepath = @$node->{$node_image_field}[0]['filepath'];
    if ($node_image_field && $node_image_filepath) {
      $node->picture = htmlspecialchars(url($node_image_filepath, array('absolute' => TRUE)));
    }
  }
}

/**
 * Загружает все ноды маркета
 *
 * @return array
 *  Массив нод
 */
function ymarket_nodes(){
  $nids = ymarket_get_nids();
  $nodes = array();
  foreach ($nids as $nid) {
    $nodes[] = node_load($nid);
  }

  return $nodes;
}

/**
 * Находит ИД всех нод, которые опубликованы в маркете
 *
 * @return array
 *  Массив ИД нод
 */
function ymarket_get_nids(){
  $field_table = ymarket_field_sql_data('table');
  $field_column = ymarket_field_sql_data('column');

  $nids = array();

  if ($field_table && $field_column) {

    $result = db_query("
      SELECT nid FROM {" . $field_table . "}
      WHERE " . $field_column . " = %d
    ", YMARKET_PUBLISHED);

    while ($row = db_fetch_array($result)) {
      $nids[] = $row['nid'];
    }

  }

  return $nids;
}

/**
 * Определяет, публикуется ли нода в маркете
 *
 * @param mixed $node
 *  Объект ноды или её ИД
 * @return bool
 */
function ymarket_node_in_market($node) {
  $nid = is_object($node) ? $node->nid : $node;

  $field_table = ymarket_field_sql_data('table');
  $field_column = ymarket_field_sql_data('column');

  $result = db_result(db_query("
    SELECT COUNT(nid) FROM {" . $field_table . "}
    WHERE " . $field_column . " = %d AND nid = %d
  ", YMARKET_PUBLISHED, $nid));

  return (bool) $result;
}

/**
 * function to get the TABLE or COLUMN for a CCK FIELD
 * method adapted from http://drewish.com/content/2010/06/correctly_accessing_cck_fields_in_sql_queries
 *
 * @param $type 'table' or 'column'
 */
function ymarket_field_sql_data($type) {
  $field_name = ymarket_field_name();
  $field = content_fields($field_name);

  if (!$field) {
    return NULL;
  }

  $db_info = content_database_info($field);

  $field_table_exists = !empty($db_info['table']);
  $field_column_exists = !empty($db_info['columns']['value']['column']);

  if (($type == 'table') && $field_table_exists) {
    return $db_info['table'];
  }
  elseif ($type == 'column' && $field_column_exists) {
    return $db_info['columns']['value']['column'];
  }

  return NULL;
}

function ymarket_field_name(){
  return variable_get('ymarket_field_name', 'ymarket');
}

function ymarket_content_type(){
  return variable_get('ymarket_field_type_name', 'page');
}

/**
 * Находит названия полей, которые предназначены для изображений и относятся к определённому типу контента
 *
 * @param string $content_type
 *  Тип контента
 * @return array
 *  Массив имён полей, если они существуют, или пустой массив.
 */
function ymarket_get_content_type_image_fields($content_type = NULL){
  $custom_fields = content_fields();
  $custom_image_fields = array();

  // Из всех полей отбираем только поля для загрузки изображений
  foreach ($custom_fields as $custom_field) {
    $is_image_field = preg_match('/gif|jpg|png/', $custom_field['widget']['file_extensions']);
    if ($is_image_field) {
      $custom_image_fields[] = $custom_field['field_name'];
    }
  }
  $image_fields = $custom_image_fields;

  // Из всех полей для загрузки изображений отбираем только поля относящиеся к конкретному типу контента
  if ($content_type) {

    foreach ($custom_image_fields as $custom_image_field_name) {
      $custom_image_field = content_fields($custom_image_field_name, $content_type);
      $field_exists = !empty($custom_image_field);
      if ($field_exists) {
        $content_image_fields[] = $custom_image_field_name;
      }
    }
    $image_fields = $content_image_fields;

  }

  return $image_fields;
}

/**
 * Выполнение операции с помощью batch API.
 *
 * @param string $operation
 *  Имя функции, которая будет вызываться.
 *  Перед началом выполнения операций будет вызвана функция $operation + _operation_init()
 *  По окончании будет вызвана функция $operation + _finshed()
 * @param string $title
 *  Название выполняемой операции
 * @param mixed $redirect
 *  Адрес, куда перенаправить после окончания
 * @param bool $process
 *  Передайте FALSE если эта функция вызывается при сабмите формы
 * @return void
 */
function ymarket_batch_do($operation, $title = '', $redirect = NULL, $process = TRUE) {
  $batch = array(
    'operations' => array(
      array('_ymarket_batch_operation', array($operation)),
    ),
    'title' => $title,
    'init_message' => t('Начинаем...'),
    'progress_message' => t('Пакетный файл @current из @total'),
    'error_message' => t('Произошла ошибка.'),
  );

  $finish_function = $operation . '_finished';
  $finish_function_exists = function_exists($finish_function);
  if ($finish_function_exists) {
    $batch['finished'] = $finish_function;
  }

  batch_set($batch);

  if ($process) {
    batch_process($redirect);
  }
}

/**
 * _ymarket_batch_operation()
 *
 * @param mixed $operation
 *  Имя функции, которая будет вызываться как операция
 * @param mixed $context
 * @return void
 */
function _ymarket_batch_operation($operation, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;

    // Инициализация необходимых переменных
    $operation_init = $operation . '_operation_init';
    $operation_init($context);
  }

  // Выполнение операции.
  // Функция операции должна вернуть число на которое должен быть увеличен счётчик
  $context['sandbox']['progress'] += $operation($context);

  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Считает количество строк в таблице, где поле ymarket не имеет значения
 *
 * @param mixed $context
 * @return void
 */
function ymarket_set_fields_default_operation_init(&$context) {
  $context['sandbox']['field_table'] = ymarket_field_sql_data('table');
  $context['sandbox']['field_column'] = ymarket_field_sql_data('column');

  $q = "
    SELECT COUNT(DISTINCT nid)
    FROM {" . $context['sandbox']['field_table'] . "}
    WHERE " . $context['sandbox']['field_column'] . " IS NULL
  ";
  $context['sandbox']['max'] = db_result(db_query($q));
}

/**
 * Находит строки, где поле ymarket не имеет значения
 * и устанавливает значение по умолчанию
 *
 * @param mixed $context
 * @return
 *  Количество обработанных строк
 */
function ymarket_set_fields_default(&$context) {
  $limit = 50;

  db_query("
    UPDATE {" . $context['sandbox']['field_table'] . "}
    SET " . $context['sandbox']['field_column'] . "=%d
    WHERE " . $context['sandbox']['field_column'] . " IS NULL
    LIMIT %d
  ", YMARKET_UNPUBLISHED, $limit);

  return $limit;
}
